name: "Action Setup Godot"

description: "Downloads the specified Godot version and its Export Templates from the godotengine/godot-builds repo on GitHub."

branding:
  icon: "play"
  color: "blue"

inputs:
  version:
    description: "The version of Godot to setup"
    type: string
    required: true
  csharp:
    description: "Downloads the mono version of godot."
    type: boolean
    default: false
    required: true
  name:
    description: "The name to use for the godot executable. Defaults to 'godot'"
    default: "godot"
    type: string
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Godot on Linux
      shell: bash
      if: runner.os == 'Linux'
      run: |
        INSTALL_DIR=${HOME}/.godot-install-dir/${{ inputs.version }}
        mkdir -p $INSTALL_DIR

        echo "Creating $INSTALL_DIR"

        if [ "${{ inputs.csharp }}" = "true" ]; then
          GODOT_DOWNLOAD_URL=https://github.com/godotengine/godot-builds/releases/download/${{ inputs.version }}/Godot_v${{ inputs.version }}_mono_linux_x86_64.zip
        else
          GODOT_DOWNLOAD_URL=https://github.com/godotengine/godot-builds/releases/download/${{ inputs.version }}/Godot_v${{ inputs.version }}_linux.x86_64.zip
        fi

        echo "Downloading: $GODOT_DOWNLOAD_URL"

        cd $INSTALL_DIR
        wget -O godot.zip -q $GODOT_DOWNLOAD_URL
        unzip godot.zip
        rm -rf godot.zip

        if [ "${{ inputs.csharp }}" = "true" ]; then
          mv Godot_v${{ inputs.version }}_mono_linux_x86_64/* .
          mv Godot_v${{ inputs.version }}_mono_linux.x86_64 ${{ inputs.name }}
          rm -rf Godot_v${{ inputs.version }}_mono_linux_x86_64
        else
          mv Godot_v${{ inputs.version }}_linux.x86_64 ${{ inputs.name }}
        fi

        ls -la $INSTALL_DIR
        echo $INSTALL_DIR >> $GITHUB_PATH

    - name: Install Godot on Windows
      shell: bash
      if: runner.os == 'Windows'
      run: |
        INSTALL_DIR=${HOME}/.godot-install-dir/${{ inputs.version }}
        mkdir -p $INSTALL_DIR

        echo "Creating $INSTALL_DIR"

        if [ "${{ inputs.csharp }}" = "true" ]; then
          GODOT_DOWNLOAD_URL=https://github.com/godotengine/godot-builds/releases/download/${{ inputs.version }}/Godot_v${{ inputs.version }}_mono_win64.zip
        else
          GODOT_DOWNLOAD_URL=https://github.com/godotengine/godot-builds/releases/download/${{ inputs.version }}/Godot_v${{ inputs.version }}_win64.exe.zip
        fi

        echo "Downloading: $GODOT_DOWNLOAD_URL"

        cd $INSTALL_DIR
        curl -sSL -o godot.zip $GODOT_DOWNLOAD_URL
        unzip godot.zip
        rm -rf godot.zip

        if [ "${{ inputs.csharp }}" = "true" ]; then
          mv Godot_v${{ inputs.version }}_mono_win64/* .
          mv Godot_v${{ inputs.version }}_mono_win64.exe ${{ inputs.name }}.exe
          rm -rf Godot_v${{ inputs.version }}_mono_win64
        else
          mv Godot_v${{ inputs.version }}_win64.exe ${{ inputs.name }}.exe
        fi

        ls -la $INSTALL_DIR
        Add-Content -Path $env:GITHUB_PATH -Value $INSTALL_DIR

    - name: Download Export Templates
      shell: bash
      run: |
        cd $RUNNER_TEMP

        if [ "${{ inputs.csharp }}" = "true" ]; then
          curl -sSL -o templates.tpz -q https://github.com/godotengine/godot-builds/releases/download/${{ inputs.version }}/Godot_v${{ inputs.version }}_mono_export_templates.tpz
          if [ "$RUNNER_OS" = "Linux" ]; then
            EXPORT_TEMPLATES_DIR=${HOME}/.local/share/godot/export_templates/${INPUTS_VERSION/-/.}.mono
          else
            EXPORT_TEMPLATES_DIR=${APPDATA}/Godot/export_templates/${INPUTS_VERSION/-/.}.mono
          fi
        else
          curl -sSL -o templates.tpz -q https://github.com/godotengine/godot-builds/releases/download/${{ inputs.version }}/Godot_v${{ inputs.version }}_export_templates.tpz
          if [ "$RUNNER_OS" = "Linux" ]; then
            EXPORT_TEMPLATES_DIR=${HOME}/.local/share/godot/export_templates/${INPUTS_VERSION/-/.}
          else
            EXPORT_TEMPLATES_DIR=${APPDATA}/Godot/export_templates/${INPUTS_VERSION/-/.}
          fi
        fi

        unzip templates.tpz
        rm -rf templates.tpz

        mkdir -p $EXPORT_TEMPLATES_DIR
        mv ./templates/* $EXPORT_TEMPLATES_DIR
        ls -la $EXPORT_TEMPLATES_DIR
      env:
        INPUTS_VERSION: ${{ inputs.version }}
